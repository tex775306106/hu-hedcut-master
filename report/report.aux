\relax 
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand*\HyPL@Entry[1]{}
\HyPL@Entry{0<</S/D>>}
\@writefile{toc}{\contentsline {section}{\numberline {1}Summary of the two methods}{1}{section.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}hedcuter method}{1}{subsection.1.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.1}Voronoi diagram and Centroidal Voronoi tessellation}{1}{subsubsection.1.1.1}}
\@writefile{toc}{\contentsline {paragraph}{First, the algorithm resizes the input image to a larger virtual image. Then, it scans the cells and stores all sites in a heap. After, it pops a cell to compute dx and dy so to get the centroidal voronoi diagram. When all cells are visited and the heap is empty, it collects cells from (0,0) rightwards and then remove empty cells. Finally, it moves each cell to its center of its coverage.}{1}{section*.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.2}stippling}{1}{subsubsection.1.1.2}}
\@writefile{toc}{\contentsline {paragraph}{It reads the image and the centroidal voronoi tessellation computed before to stipple. It retrieves each cell from CVT and its grayscale information. Then, the location of each disk is defined by the x and y coordinates of each sites of the cells retrieved. The color of it is determinded by grayscale value. If it is required a colorful output, then the rgb value is from the original image's rgb value at that pixel.}{1}{section*.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}voronoi method}{1}{subsection.1.2}}
\@writefile{toc}{\contentsline {paragraph}{First, it computes the range of the coordinates of the sites. Then do the plane sweep, if the sites' y coordinate is bigger than the lowest intersection's, it determines which half edge the new site intersects with and will triangulate it. If the sites' y is smaller, it creates a new bisector between the left and right half edges. Finally, it scans the edges and eliminates the invalid edges. }{1}{section*.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.1}Centroidal Voronoi tessellation}{1}{subsubsection.1.2.1}}
\@writefile{toc}{\contentsline {paragraph}{It adds clip lines to the voronoi digrams one by one. If the density is higher there, the x and y there will also get larger weight when computing the new centroid. If no points are outside the clip planes,the centroid is computed by the sum of coordinates and the density there. }{1}{section*.4}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.2}stippling}{2}{subsubsection.1.2.2}}
\@writefile{toc}{\contentsline {paragraph}{It read the coordinates of all the centroids created before. Then it outputs them to the output file. And it assigns each of them the right color as needed.}{2}{section*.5}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Comparison of the two methods}{2}{section.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Different outputs from hedcuter}}{2}{figure.1}}
\newlabel{threadsVsSync}{{1}{2}{Different outputs from hedcuter\relax }{figure.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Outputs from hedcuter}}{2}{figure.2}}
\newlabel{threadsVsSync}{{2}{2}{Outputs from hedcuter\relax }{figure.2}{}}
\@writefile{toc}{\contentsline {paragraph}{1. The output images from hedcuter are different as shown in Figure 1. But the output images from voronoi are the same. Because hedcuter uses rng\_uniorm and rng\_gaussian methods to randomly initial points, the details is normal to be different during each run.}{2}{figure.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Outputs from voronoi}}{3}{figure.3}}
\newlabel{threadsVsSync}{{3}{3}{Outputs from voronoi\relax }{figure.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Outputs from hedcuter}}{3}{figure.4}}
\newlabel{threadsVsSync}{{4}{3}{Outputs from hedcuter\relax }{figure.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Outputs from voronoi}}{3}{figure.5}}
\newlabel{threadsVsSync}{{5}{3}{Outputs from voronoi\relax }{figure.5}{}}
\@writefile{toc}{\contentsline {paragraph}{2. The overall distribution will be the same for both methods. As Figure 2 and Figure 3 shows, the distribution remains the same. The difference here is that the one with more disks seems to be darker, because its density of disks is higher. And following these 2 methods, darker places deserve more disks. So the distribution should always be the same.}{3}{figure.5}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Outputs from hedcuter}}{4}{figure.6}}
\newlabel{threadsVsSync}{{6}{4}{Outputs from hedcuter\relax }{figure.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Outputs from hedcuter}}{4}{figure.7}}
\newlabel{threadsVsSync}{{7}{4}{Outputs from hedcuter\relax }{figure.7}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces Outputs from hedcuter}}{4}{figure.8}}
\newlabel{threadsVsSync}{{8}{4}{Outputs from hedcuter\relax }{figure.8}{}}
\@writefile{toc}{\contentsline {paragraph}{3. As Figure 4 and 5 show, the voronoi method is always much faster than the other one when parameters are the same. And I think the reason hedcuter method is slower that much is because it generates the same virtual image repetitively. So, I take it as one of my improvement and the result is not bad. And other reasons are voronoi precomputes the sets of distribution and merge them at runtime. But hedcuter method is doing plane sweep from points with small x coordinates which is time consuming.}{5}{figure.8}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces Outputs from hedcuter}}{5}{figure.9}}
\newlabel{threadsVsSync}{{9}{5}{Outputs from hedcuter\relax }{figure.9}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces Outputs from hedcuter}}{5}{figure.10}}
\newlabel{threadsVsSync}{{10}{5}{Outputs from hedcuter\relax }{figure.10}{}}
\@writefile{toc}{\contentsline {paragraph}{4. As figure 6, 7 and 8 show, for both methods, the same picture with smaller size consumes less time, because less pixels mean less iteration. For hedcuter method, it runs much faster with the low contrast picture. Because lowering contrast makes the picture darker. And when the picture is getting darker and darker, its distribution of disks becomes more uniform. Thus, the propagation task is achieved faster. }{5}{figure.10}}
\@writefile{toc}{\contentsline {paragraph}{5. From Figure 9 and 10, different types of images have the approximate total time for voronoi method. But for hedcuter method, it performs better on landscape picture. I think it's because the landscape picture I chose is relatively darker than other types of pictures. So the reason is like for the pictures with low contrast value. }{5}{figure.12}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces hedcut image from Wall Street Journal}}{6}{figure.11}}
\newlabel{threadsVsSync}{{11}{6}{hedcut image from Wall Street Journal\relax }{figure.11}{}}
\@writefile{toc}{\contentsline {paragraph}{6. I think hedcut images from the Wall Street Journal are better than images generated by these 2 methods. As shown in Figure 11, it has smooth boundaries and more artistic distribution of disks. Figure 12 is generated by voronoi method from a 200x200 picture with 2000 disks. Although viewers are able to tell what's in the hedcut picture, its distribution of disks is not as natural as the one from Wall Street Journal.}{6}{section*.11}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Improvement of hedcuter method}{6}{section.3}}
\@writefile{toc}{\contentsline {paragraph}{The first improvement is that I reorganized same codes so that the workload for vor and move\_sites methods are reduced. According to the original code, it seems like each loop these two methods will generate a virtual high resolution image with the same parameters which means there is no need to do it repetitively. And it's also time consuming. Then, I changed that part of code so that the virtual image generating will be done only once. Figure 13 shows the total time the original program used to output the result. Figure 14 shows the total time the improved program used. The total time has reduced.}{6}{figure.15}}
\bibstyle{plain}
\bibdata{report}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces Outputs from hedcuter}}{7}{figure.12}}
\newlabel{threadsVsSync}{{12}{7}{Outputs from hedcuter\relax }{figure.12}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {13}{\ignorespaces output from original method}}{7}{figure.13}}
\newlabel{threadsVsSync}{{13}{7}{output from original method\relax }{figure.13}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {14}{\ignorespaces outputs from new one}}{7}{figure.14}}
\newlabel{threadsVsSync}{{14}{7}{outputs from new one\relax }{figure.14}{}}
\@writefile{toc}{\contentsline {paragraph}{The second improvement is that the program now can treat png files which contain transparent alpha channel correctly. The original version treats the transparent background as black which makes the output file weird. I modified main.cpp to make the input file lay on a white image. Fiqure 15 shows the comparison of the original program against the improved program with the same parameters. But when outputing colorful disks, the color of each disk is not always right. }{7}{section*.13}}
\@writefile{lof}{\contentsline {figure}{\numberline {15}{\ignorespaces comparison}}{8}{figure.15}}
\newlabel{threadsVsSync}{{15}{8}{comparison\relax }{figure.15}{}}
\@writefile{toc}{\contentsline {paragraph}{Folder hedcuter2 has the codes for the first improvement. And folder hedcuter3 has the second improvement. And the output image makes more sense now.}{8}{section*.14}}
